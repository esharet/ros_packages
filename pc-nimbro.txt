The goal of the exercise is:
1. Publish ROS2 PC topic
2. Transfer to ROS1 with ros1_bridge
3. Transfer from ROS1 network to remote ROS1 network with the help of Nimbro
4. Publish the transferred ROS1 topic in the remote computer.
5. The python script pcd_subscriber_node.py in package pcd_modified of the ros2foxy_ws catches the 
ROS2 point cloud topic cloud_topic and republishes on the ROS2 topic: from_ros2_pcd
6. The topic /cloud_topic is generated by the class generatePointCloud.cpp in the package 
ros_package from the workspace ctools.

In order to run:
1. First terminal:
    1. Connect to client computer: ssh 192.168.1.43
    2. cd ~/git/ctools/
    3. source devel/setup.bash
    4. vi udp_receiver.launch and add <remap from="/from_ros2_pcd" to="/recv/from_ros2_pcd" />
    5. roslaunch nimbro_topic_transport udp_receiver.launch
2. Second terminal:
    1. Connect to client computer: ssh 192.168.1.43
    2. source git/ctools/devel/setup.bash
    3. rostopic echo /recv/from_ros2_pcd
1. Third terminal: 
    source /opt/ros/noetic/setup.bash
    source git/ctools/devel/setup.bash
    roslaunch nimbro_topic_transport udp_sender.launch target:=192.168.1.43 
        with the relevant yaml topics.yaml
           topics:
            - name: "/chatter"
                compress: true # enable bz2 compression
                rate: 1.0 # rate limit at 1Hz
            - name: "/my_second_topic"
            - name: "/from_ros2_pcd"
                compress: true # enable bz2 compression
                rate: 1.0 # rate limit at 1Hz
4. Fourth terminal:
   run the bridge: ./scripts/shellscripts/ros1ros2bridge.sh
5. Fifth terminal: publish ROS1 point cloud topic
    source /opt/ros/noetic/setup.bash
    source git/ctools/devel/setup.bash
    rosrun ros_package generatePointCloud_node
6. Sixth terminal: receive ROS1 PC and republish as ROS2 PC
    source /opt/ros/foxy/setup.bash
    source git/ros2foxy_ws/install/setup.bash
    ros2 run pcd_modified pcd_subscriber_node

